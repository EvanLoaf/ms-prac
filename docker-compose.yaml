version: '3.8'

services:
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    restart: always
    depends_on:
      - elasticsearch
    environment:
      - STORAGE_TYPE=elasticsearch
      - "ES_HOSTS=elasticsearch:9300"
    ports:
      - "9411:9411"
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.7.0
    container_name: elasticsearch
    restart: always
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
#       true to make web login appear
#      - xpack.security.enabled=false
#      - xpack.security.transport.ssl.enabled=false
#      - xpack.security.http.ssl.enabled=false
      - cluster.name=docker-cluster
      - node.name=elasticsearch
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch:/var/lib/elasticsearch
    ports:
      - "9300:9300"
      - "9200:9200"
  kibana:
    image: docker.elastic.co/kibana/kibana:7.7.0
    container_name: kibana
    restart: always
    environment:
      ELASTICSEARCH_URL: "http://elasticsearch:9300"
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
  logstash:
    image: docker.elastic.co/logstash/logstash:7.7.0
    user: root
    container_name: logstash
    restart: always
    command: logstash -f /etc/logstash/conf.d/logstash.conf
    volumes:
      - ./config:/etc/logstash/conf.d
    ports:
      - "5001:5001"
  zookeeper:
    image: zookeeper:latest
    ports:
      - "2181:2181"
    restart: always
    container_name: zookeeper
  kafka:
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
    restart: always
    container_name: kafka
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=kafka
      - KAFKA_ADVERTISED_PORT=9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CREATE_TOPICS=dresses:1:1,ratings:1:1
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - kafka:/var/lib/kafka/data
    depends_on:
      - zookeeper
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    restart: always
    container_name: redis
    volumes:
      - redis:/var/lib/redis/data
  keycloak:
    restart: always
    image: jboss/keycloak
    container_name: keycloak
#    command:
#      - start-dev
    environment:
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
      DB_VENDOR: postgres
      DB_ADDR: postgres
      DB_DATABASE: keycloak
      DB_SCHEMA: public
      DB_USER: postgres
      DB_PASSWORD: postgres
    depends_on:
      - postgres
    volumes:
      - keycloak:/var/lib/keycloak/data
#    networks:
#      keycloak:
#        aliases:
#          - "keycloak"
    ports:
      - "8080:8080"
  my-gateway-service:
    build: ./gateway-service/
    hostname: my-gateway-service
    ports:
      - "8072:8072"
    container_name: my-gateway-service
    depends_on:
      my-config-service:
        condition: service_healthy
      my-eureka-service:
        condition: service_started
    restart: unless-stopped
  my-eureka-service:
    build: ./eureka-service/
    hostname: my-eureka-service
    ports:
      - "8070:8070"
    container_name: my-eureka-service
    depends_on:
      my-config-service:
        condition: service_healthy
    restart: unless-stopped
  my-config-service:
    build: ./config-service
    ports:
      - "8071:8071"
    container_name: my-config-service
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://my-config-service:8071/license-service/dev" ]
      interval: 3s
      timeout: 1s
      retries: 10
      start_period: 5s
    restart: unless-stopped
  my-org-service:
    #    image: license-service
    build: ./organization-service
    container_name: my-org-service
    depends_on:
      postgres:
        condition: service_started
      my-config-service:
        condition: service_healthy
    ports:
      - "8091:8091"
    environment:
      - "SPRING_PROFILE_ACTIVE=dev"
    restart: unless-stopped
  my-lic-service:
#    image: license-service
    build: ./license-service
    container_name: my-lic-service
    depends_on:
      postgres:
        condition: service_started
      my-config-service:
        condition: service_healthy
    ports:
      - "8090:8090"
    environment:
      - "SPRING_PROFILE_ACTIVE=dev"
    restart: unless-stopped
  mybatis-service:
    build: ./mybatis-service
    container_name: mybatis-service
    depends_on:
      postgres:
        condition: service_started
    ports:
      - "9090:9090"
    environment:
      - "SPRING_PROFILE_ACTIVE=dev"
    restart: unless-stopped
  mybatis-sub-service:
    build: ./mybatis-sub-service
    container_name: mybatis-sub-service
    ports:
      - "9091:9091"
    environment:
      - "SPRING_PROFILE_ACTIVE=dev"
    restart: unless-stopped
  rabbitmq:
    image: rabbitmq:3.10.7-management-alpine
    container_name: rabbitmq
    restart: on-failure
    hostname: rabbitmq
#    command:
#      - rabbitmqctl set_policy ha_fed ".*"
#      - '{"federation-upstream-set":"all", "ha-mode":"nodes", "ha-params":["rabbit@rabbitmq", "rabbit@rabbitmq-2", "rabbit@rabbitmq-3"]}'
#      - --priority 1 --apply-to queues
    # && rabbitmqctl start_app
#    command: >
#      rabbitmqctl start_app
#      && 
#      rabbitmqctl set_policy ha_fed ".*" \
#      '{"federation-upstream-set":"all", "ha-sync-mode":"automatic", "ha-mode":"nodes", "ha-params":["rabbit@rabbitmq", "rabbit@rabbitmq-2", "rabbit@rabbitmq-3"]}' \
#      --priority 1 --apply-to queues
    environment:
      - RABBITMQ_DEFAULT_PASS=root
      - RABBITMQ_DEFAULT_USER=root
      - RABBITMQ_ERLANG_COOKIE=ABCDEFGHIJKLMNOPQRSTUVWXYZ
      - RABBITMQ_CONFIG_FILE=/config/rabbitmq
      - TZ=Europe/Minsk
    ports:
#      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq:/var/lib/rabbitmq/data
      - ${PWD}/rabbit-config/rabbitmq/:/config/
  rabbitmq-2:
    image: rabbitmq:3.10.7-management-alpine
    container_name: rabbitmq-2
    hostname: rabbitmq-2
    restart: on-failure
#    command: rabbitmq-plugins enable rabbitmq_federation
    environment:
      - RABBITMQ_DEFAULT_PASS=root
      - RABBITMQ_DEFAULT_USER=root
      - RABBITMQ_ERLANG_COOKIE=ABCDEFGHIJKLMNOPQRSTUVWXYZ
      - RABBITMQ_CONFIG_FILE=/config/rabbitmq
      - TZ=Europe/Minsk
    ports:
#      - "5672:5672"
      - "15673:15672"
    volumes:
      - rabbitmq:/var/lib/rabbitmq/data
      - ${PWD}/rabbit-config/rabbitmq-2/:/config/
  rabbitmq-3:
    image: rabbitmq:3.10.7-management-alpine
    container_name: rabbitmq-3
    hostname: rabbitmq-3
    restart: on-failure
#    command: rabbitmq-plugins enable rabbitmq_federation
    environment:
      - RABBITMQ_DEFAULT_PASS=root
      - RABBITMQ_DEFAULT_USER=root
      - RABBITMQ_ERLANG_COOKIE=ABCDEFGHIJKLMNOPQRSTUVWXYZ
      - RABBITMQ_CONFIG_FILE=/config/rabbitmq
      - TZ=Europe/Minsk
    ports:
#      - "5672:5672"
      - "15674:15672"
    volumes:
      - rabbitmq:/var/lib/rabbitmq/data
      - ${PWD}/rabbit-config/rabbitmq-3/:/config/
  nginx:
    image: nginx:stable-alpine
#    command: mkdir -p /var/nginx/cache
    volumes:
      - nginxcache:/var/nginx/cache
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/auth/authdetails:/etc/nginx/conf.d/authdetails:ro
    restart: on-failure
    environment:
      - TZ=Europe/Minsk
    container_name: nginx
    ports:
      - "10000:81"
      - "9999:80"
  postgres:
    image: postgres:14.1-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    container_name: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres:/var/lib/postgresql/data
  vault:
    image: vault
    container_name: vault
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=1234
    ports:
      - "8200:8200"
    restart: unless-stopped
    volumes:
      - vault:/var/lib/vault/data
volumes:
  rabbitmq:
    driver: local
  nginxcache:
    driver: local
  elasticsearch:
    driver: local
  vault:
    driver: local
  postgres:
    driver: local
  keycloak:
    driver: local
  kafka:
    driver: local
  redis:
    driver: local
networks:
  keycloak:
    driver: bridge
