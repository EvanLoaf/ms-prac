version: '3.8'

services:
  zookeeper:
    image: zookeeper:latest
    ports:
      - "2181:2181"
    restart: always
    container_name: zookeeper
  kafka:
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
    restart: always
    container_name: kafka
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=kafka
      - KAFKA_ADVERTISED_PORT=9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CREATE_TOPICS=dresses:1:1,ratings:1:1
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - kafka:/var/lib/kafka/data
    depends_on:
      - zookeeper
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    restart: always
    container_name: redis
    volumes:
      - redis:/var/lib/redis/data
  keycloak:
    restart: always
    image: jboss/keycloak
    container_name: keycloak
#    command:
#      - start-dev
    environment:
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
      DB_VENDOR: postgres
      DB_ADDR: postgres
      DB_DATABASE: keycloak
      DB_SCHEMA: public
      DB_USER: postgres
      DB_PASSWORD: postgres
    depends_on:
      - postgres
    volumes:
      - keycloak:/var/lib/keycloak/data
#    networks:
#      keycloak:
#        aliases:
#          - "keycloak"
    ports:
      - "8080:8080"
  my-gateway-service:
    build: ./gateway-service/
    hostname: my-gateway-service
    ports:
      - "8072:8072"
    container_name: my-gateway-service
    depends_on:
      my-config-service:
        condition: service_healthy
    restart: unless-stopped
  my-eureka-service:
    build: ./eureka-service/
    hostname: my-eureka-service
    ports:
      - "8070:8070"
    container_name: my-eureka-service
    depends_on:
      my-config-service:
        condition: service_healthy
    restart: unless-stopped
  my-config-service:
    build: ./config-service
    ports:
      - "8071:8071"
    container_name: my-config-service
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://my-config-service:8071/license-service/dev" ]
      interval: 3s
      timeout: 1s
      retries: 10
      start_period: 5s
    restart: unless-stopped
  my-org-service:
    #    image: license-service
    build: ./organization-service
    container_name: my-org-service
    depends_on:
      postgres:
        condition: service_started
      my-config-service:
        condition: service_healthy
    ports:
      - "8091:8091"
    environment:
      - "SPRING_PROFILE_ACTIVE=dev"
    restart: unless-stopped
  my-lic-service:
#    image: license-service
    build: ./license-service
    container_name: my-lic-service
    depends_on:
      postgres:
        condition: service_started
      my-config-service:
        condition: service_healthy
    ports:
      - "8090:8090"
    environment:
      - "SPRING_PROFILE_ACTIVE=dev"
    restart: unless-stopped
  postgres:
    image: postgres:14.1-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    container_name: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres:/var/lib/postgresql/data
  vault:
    image: vault
    container_name: vault
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=1234
    ports:
      - "8200:8200"
    restart: unless-stopped
    volumes:
      - vault:/var/lib/vault/data
volumes:
  vault:
    driver: local
  postgres:
    driver: local
  keycloak:
    driver: local
  kafka:
    driver: local
  redis:
    driver: local
networks:
  keycloak:
    driver: bridge
